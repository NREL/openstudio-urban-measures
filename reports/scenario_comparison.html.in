<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Something</title>
  <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.2/lodash.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.5.8/angular.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.4.0/d3.min.js"></script>
</head>
<body>

<div ng-app="myApp">

  <div ng-controller="MyAppCtrl">

    <h1>Scenarios</h1>
    <ul>
      <li class="alert alert-warning" ng-repeat="scenario in scenarios">{{ scenario.name }} <d3ng-scenario data=scenario></d3ng-scenario >  </li>
    </ul>

  </div>

</div>

<script type="text/javascript">

  console.info("Loaded End Use Comparison.html script");

  var myApp = angular.module('myApp', []);

  myApp.controller('MyAppCtrl', function ($scope) {

    // Create a CSV of the standard data
    $scope.elecEndUseData = [];
    $scope.gasEndUseData = [];
    console.debug('In the controller');

    // Show any issues
    $scope.renderWarns = [];

    // Set up some additional data properties after the results
    // are passed in.
    $scope.setupAfterResultsAvailable = function () {

      var renderWarns = [];

      console.debug('In setupAfterResultsAvailable');

      // Populate arrays of data for electricity and gas by end use
      var fuels = ['end_use_electricity_', 'end_use_natural_gas_'];
      _.forEach(fuels, function (fuel) {

        var elecEndUseDataColsKeys = [
          "Heating",
          "Cooling",
          "Interior Lighting",
          "Exterior Lighting",
          "Interior Equipment",
          "Exterior Equipment",
          "Fans",
          "Pumps",
          "Heat Rejection",
          "Humidification",
          "Heat Recovery",
          "Water Systems",
          "Refrigeration",
          "Generators"
        ]
        var newData = [];
        _.forEach($scope.results, function (run) {

          // Get the OpenStudio Results measure, which contains the results
          var reportMeasure = null;
          _(run.steps).forEach(function (step) {
            if (step.hasOwnProperty('result')) {
              if (step.result.measure_uid == "a25386cd-60e4-46bc-8b11-c755f379d916") {
                reportMeasure = step;
              }
            }
          });
          if (!reportMeasure) {
            renderWarns.push("The OpenStudio Results measure was not included in " + run.name + ", cannot show results.");
            return;
          }

          // Make sure the results exist
          if (!reportMeasure.hasOwnProperty('result')){
            renderWarns.push("The OpenStudio Results measure was not run in " + run.name + ", cannot show results.");
            return;
          }

          // Make sure the results have data
          var vals = reportMeasure.result.step_values;
          if (vals.length == 0){
            renderWarns.push("The OpenStudio Results measure was not run in " + run.name + ", cannot show results.");
            return;
          }

          // Make sure the EUI element exists to ensure measure was run
          if (!_.find(vals, {'name': "eui"})) {
            renderWarns.push("The OpenStudio Results measure was not run in " + run.name + ", cannot show results.");
            return;
          }

          // Populate an object with the end use data
          var data = {};
          data.name = run.name;
          var tot = 0.0;
          _.forEach(elecEndUseDataColsKeys, function (key) {
            // Define the data header
            var header = key.toLowerCase().replace(' ', '_');
            var lookup = fuel + header;
            var val = _.find(vals, {'name': lookup}).value;
            data[header] = val;
            tot += val;
          });
          data.total = tot;

          newData.push(data);

        });

        // Add this datapoint to the overall set
        //$scope.elecEndUseData.push(data);
        switch (fuel){
          case 'end_use_electricity_':
            $scope.elecEndUseData = newData;

          case 'end_use_natural_gas_':
            $scope.gasEndUseData = newData;
        }

      });

      // Show a unique set of warnings
      _.forEach(_.uniq(renderWarns), function (warn) {
        $scope.renderWarns.push(warn);
      });

    };

    // Warn user that this report doesn't work in Algorithmic mode
    $scope.setupAfterAlgorithmicResultsAvailable = function () {
      if ( $scope.algorithm_results.length > 0 || $scope.algorithm_metadata.length > 0 ) {
        $scope.renderWarns.push("This report will only work with Analysis Type = Manual.");
      }
    };
    
    function setReportDir(reportDir) {
      console.log("Inside setReportDir");
      $scope.reportDir = reportDir;
    }

    // set $scope.results element in the controller above from PAT data
    function setData(data) {
      console.log('Setting results variable to: ', data);
      $scope.results = data;
      console.debug('In setData');
      $scope.setupAfterResultsAvailable();
    }

    function setAlgorithmicData(metadata, results) {
      $scope.algorithm_results = metadata;
      $scope.algorithm_metadata = results;
      $scope.setupAfterAlgorithmicResultsAvailable();
    }
    
    $scope.scenarios = <%=JSON::generate(scenarios)%>;
    setReportDir("<%=project_path%>");
    setData($scope.scenarios);

  });
  
  // Angular directive to create a scenario widget
  myApp.directive('d3ngScenario', function () {

    // constants
    var total_width = 960;
    var total_height = 500;

    var margin = {top: 20, right: 120, bottom: 60, left: 40},
      width = total_width - margin.left - margin.right,
      height = total_height - margin.top - margin.bottom;

    return {
      restrict: 'E',
      terminal: true,
      scope: {
        data: '='
      },
      link: function (scope, element, attrs) {

        scope.$watch('data', function (newData, oldData) {

          console.debug('In the directive');

          var data = newData;
console.debug(data);
          // return nothing if the data isn't available yet
          if (data.length == 0) {
            console.info("Data is not ready yet, not creating a chart.");
            return;
          }

        });

      }
    }
  });

</script>

</body>
</html>
